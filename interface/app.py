import streamlit as st
import pandas as pd
import numpy as np
import requests
from io import BytesIO
import base64


st.set_page_config(layout="wide") # sets layout to wide

# Input widgets in the sidebar
with st.sidebar:
	""" ### Navigation"""
	# input widget 2
	...

# Load data based on the inputs from the sidebar widgets

# Main body contents: Output Widgets
st.title("Proteomomic-based Brain Cancer Prediction")

## Introduction



col1, col2 = st.columns(2)

with col1:
   st.header("Gliomas")

with col2:
    st.write("""
             Gliomas are the most common type of malignant brain tumor. \n
             They occur in **glial** cells: the cells that surround and support neurons. \n
             A variety of glial cells are found in the nervous system.""")

#image1 = Image.open('750px-Blausen_0870_TypesofNeuroglia.png')
#st.image(image1)

st.markdown('## The Problem')

st.markdown("""
        - Diffuse gliomas represent 80% of malignant brain tumors.
        - Adult diffuse gliomas are classified and graded according to histological criteria (oligodendroglioma, oligoastrocytoma, astrocytoma, and glioblastoma; grade II to IV).
        - Histopathologic classification suffers from high intra- and inter-observer variability, particularly among grade II-III tumors.
        - Recent molecular characterization studies have benefited from the availability of the datasets generated by The Cancer GenomeAtlas (TCGA).
"""
)




st.header("Oligodendroglioma or Astrocytoma?")

#image2 = Image.open('41374_2003_Article_BF3780627_Fig1_HTML.jpg')
#st.image(image2, caption='Histopathologic Classification of Gliomas', use_column_width=False)



###########################Prediction################################################################


st.header("Oligodendroglioma or Astrocytoma?")
st.markdown('''
**Let's predict based on proteomics data!** \n
**Upload your data here:**
''')

#st.set_option('deprecation.showfileUploaderEncoding', False)

data = st.file_uploader("Choose a CSV file", type="csv")

if st.button('Show my uploaded data'):
    # print is visible in the server output, not in the page
    df_upload = pd.read_csv(data)
    st.write(df_upload.head(3))

if data:
    data.seek(0) # to reload data into the buffer


# st.markdown('''
# **Test**:
# This is a test to make sure that the data can be loaded and passed to the api.
# If it works it will return the value of first column, first row in the df.
# ''')
# # try with endpoint predict_uploaded_file_test
# # include string concatenation to avoid errors
# # this works
# base_url = 'http://127.0.0.1:8000'
# endpoint = 'predict_uploaded_file_test'
# brainproteomics_api_url = f'{base_url}/{endpoint}'
# response = requests.post(brainproteomics_api_url, files={"file": data})
# prediction = response.json()
# st.write(prediction)


############# RUN PREDICTION FOR 1 SAMPLE ######################################
data.seek(0)
st.markdown('''
### To predict the type of cancer based on your uploaded data click predict:
''')
# try with endpoint predict_uploaded_file_test
# include string concatenation to avoid errors
# this works
base_url = 'http://127.0.0.1:8000'
endpoint = 'predict_uploaded_file'
brainproteomics_api_url = f'{base_url}/{endpoint}'
response = requests.post(brainproteomics_api_url, files={"file": data})

prediction = response.json()


if st.button('Predict!'):
    # print is visible in the server output, not in the page

    st.write('Prediction was successful ðŸŽ‰')
    st.subheader(f'Cancer type: {prediction["Outcome"]}')
    st.subheader(f'Probability: {prediction["Probability"]}')
else:
    st.write('I was not clicked ðŸ˜ž')


############# RUN PREDICTION FOR SEVERAL SAMPLE ################################
data.seek(0)
st.markdown('''
### Predict the type of cancer for all your uploaded samples:
''')
if st.button('Run prediction for all samples'):
    # print is visible in the server output, not in the page

    base_url = 'http://127.0.0.1:8000'
    endpoint = 'predict_several_samples'
    brainproteomics_api_url = f'{base_url}/{endpoint}'
    response = requests.post(brainproteomics_api_url, files={"file": data})

    prediction = response.json()
    st.write('Prediction was successful ðŸŽ‰')

    result_df = pd.DataFrame(prediction).transpose()
    result_df = result_df.rename(columns={0: "Identifier",
                                          1: "Prediction",
                                          2: "Probability"})

    st.write(result_df)



else:
    st.write('I was not clicked ðŸ˜ž')
